#!/usr/bin/env python3
import datetime
import requests
import sys

__author__ = "Lindsay Kerr <email: contact@linzk.net>"
__version__ = "0.1.0"
__license__ = "MIT"
__copyright__ = "2023 Lindsay Kerr"
__status__ = "Development"


def main():

    args = get_command_line_args()
    domain = 'localhost'
    port = 80
    resource = ''

    # Check if there are any command line arguments
    if args:
        domain = args['domain'] if 'domain' in args else domain
        port = int(args['port']) if 'port' in args else port
        resource = args['resource'] if 'resource' in args else resource
    try:
        # Make a request to the server
        print(f'http://{domain}:{port}{resource}')
        request = requests.post(f'http://{domain}:{port}{resource}', data={'code': 'CN_1268'}, timeout=5, verify=False)

        if request.status_code == 200:
            print("-o- Checked in")
        else:
            print("-x- Failed to check in")
            log_error(f'-x- Failed to check in {request.status_code}')
    
    # If there is an error, log it
    except Exception as e:
        print("-x- Failed to check in")
        print(e)
        log_error(f'-x- Failed to check in {e}')



def get_command_line_args():
    """
    Get command line arguments in the form of  and return them as a dictionary
    """

    cl_args = sys.argv[1:]

    # if there are no command line arguments, return
    if len(cl_args) == 0:
        return

    arg_dict = {}

    # Split the arguments into key value pairs and add them to the dictionary
    for arg in cl_args:
        key_val = arg.split("=")
        arg_dict[key_val[0]] = key_val[1]
    
    return arg_dict


def log_error(error_message, error_time = datetime.datetime.now()):
    """
    logs errors to a error.txt file
    """
    file = open("error.txt", "a")
    file.write("{message} - {time}\n".format(message=error_message, time=error_time))
    file.close()


if __name__ == "__main__":
    main()